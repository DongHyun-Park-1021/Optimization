#include <iostream>
#include <vector>
#include <functional>
#include <cstdlib>
#include <SDL.h>
#include <float.h>

#include "FPI.h"
#include "PGM.h"
#include "DRS_FPI.h"

const int windowHeight = 600;
const int windowWidth = 800;

int dim = 2;
int Resolution = 1000;
double mesh_size = 0.005;

using namespace std;

double f(vector<double> x) {
    double ret = 0;
    ret += x.at(0) * x.at(0) * x.at(0) * x.at(0) + x.at(1) * x.at(1) * x.at(1) * x.at(1);
    ret += x.at(0);
    ret += x.at(1) * x.at(1) * 3;
    return ret;
}

double g(vector<double> x) {
    double ret = 0;
    ret += 0.5 * sin(x.at(0) * 5 * M_PI / 180);
    ret += sin(x.at(1) * 10 * M_PI / 180);
    return ret;
}

vector<vector<double>> Create_Mesh() {
    vector<vector<double>> mesh;
    vector<double> p(dim);

    for (int x = (-1) * windowWidth / 2 ; x < windowWidth / 2 ; x += 5) {
        p[0] = x * mesh_size;
        for (int y = (-1) * windowHeight / 2 ; y < windowHeight / 2 ; y += 5) {
            p[1] = y * mesh_size;
            mesh.push_back(p);
        }
    }
    return mesh;
}

void Draw(SDL_Renderer* Renderer, vector<vector<double>> mesh, vector<vector<double>> p1, vector<vector<double>> p2, vector<double> convergence) {
    vector<double> m;

    SDL_SetRenderDrawColor(Renderer, 120, 120, 120, 60);
    for (int i = 0; i < mesh.size(); i++) {
        m = mesh.at(i);

        SDL_RenderDrawPoint(Renderer, round( ( m.at(0) - convergence.at(0)) * Resolution) + windowWidth/2, round( (m.at(1) - convergence.at(1)) * Resolution) + windowHeight/2);
    }

    SDL_SetRenderDrawColor(Renderer, 255, 120, 120, 255);
    for (int i = 0; i < p1.size(); i+=4) {
        m = p1.at(i);

        SDL_RenderDrawPoint(Renderer, round( (m.at(0) - convergence.at(0)) * Resolution) + windowWidth/2, round( (m.at(1) - convergence.at(1)) * Resolution) + windowHeight/2);
    }

    SDL_SetRenderDrawColor(Renderer, 120, 120, 255, 255);
    for (int i = 0; i < p2.size(); i+=4) {
        m = p2.at(i);

        SDL_RenderDrawPoint(Renderer, round( (m.at(0) - convergence.at(0)) * Resolution) + windowWidth/2, round( (m.at(1) - convergence.at(1)) * Resolution) + windowHeight/2);
    }

    SDL_RenderPresent(Renderer);
}

int main() {
    vector<double> start(2);
    start.at(0) = 0.492;
    start.at(1) = 0.192;

    Func F = Func(f, dim);
    Func G = Func(g, dim);

    PGM pgm = PGM(F, G, 2, 0.005, 0.005, 0.0005, 1000, 100);
    vector<vector<double>> ret_pgm;
    pgm.solve(start);
    ret_pgm = pgm.GetData();

    cout << "================================" << endl;

    start.at(0) = 0.5;
    start.at(1) = 0.2;

    DRS_FPI drs = DRS_FPI(F, G, 2, 0.005, 0.005, 0.0005, 500, 300);
    vector<vector<double>> ret_drs;
    drs.solve(start);
    ret_drs = drs.GetData();

    vector<double> convergence = ret_drs.at(ret_drs.size() - 1);

    if (SDL_Init(SDL_INIT_VIDEO) < 0) {
        return 1;
        cout << "Initialization failed" << endl;
    }

    SDL_Window *window = SDL_CreateWindow("Practice making sdl Window",
            SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, windowWidth,
            windowHeight, SDL_WINDOW_SHOWN);

    if (window == NULL) {
        SDL_Quit();
        return 2;
    }

    // We create a renderer with hardware acceleration, we also present according with the vertical sync refresh.
    SDL_Renderer *s = SDL_CreateRenderer(window, 0, SDL_RENDERER_ACCELERATED | SDL_RENDERER_PRESENTVSYNC) ;

    bool quit = false;
    SDL_Event event;
    while (!quit) {
        while (SDL_PollEvent(&event)) {
            if (event.type == SDL_QUIT) {
                quit = true;
            }
        }
        SDL_SetRenderDrawColor(s, 0, 0, 0, 255);
        SDL_RenderClear(s);

        Draw(s, Create_Mesh(), ret_pgm, ret_drs, convergence);
    }

    SDL_DestroyWindow(window);
    SDL_DestroyRenderer(s);
    SDL_Quit();

}
